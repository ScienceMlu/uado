<Project>
	<Target Name="SetApplicationVersion"
			BeforeTargets="PrepareForBuild"
			Condition="'$(BuildingInsideVisualStudio)'=='' and ('$(GITVERSION_MAJORMINORPATCH)'!='' or '$(ApplicationVersion)'!='')">
		<!-- XML namespaces -->
		<PropertyGroup>
			<_AndroidNamespace>
				<Namespace Prefix="android" Uri="http://schemas.android.com/apk/res/android" />
			</_AndroidNamespace>
			<_WindowsNamespace>
				<Namespace Prefix="x" Uri="http://schemas.microsoft.com/appx/manifest/foundation/windows10" />
			</_WindowsNamespace>
		</PropertyGroup>

		<!-- Target files -->
		<PropertyGroup>
			<_AssemblyInfoPath>.\Properties\AssemblyInfo.cs</_AssemblyInfoPath>
			<_ManifestPath>.\Properties\AndroidManifest.xml</_ManifestPath>
			<_PlistFilePath>.\Info.plist</_PlistFilePath>
			<_AppxManifestPath>.\Package.appxmanifest</_AppxManifestPath>
			<_WasmVersionFile>.\Version.txt</_WasmVersionFile>
		</PropertyGroup>

		<PropertyGroup>
			<_ApplicationVersion>$(ApplicationVersion)</_ApplicationVersion>
			<!-- If the version is not explicitely set, we use GitVersion -->
			<_ApplicationVersion Condition="'$(_ApplicationVersion)'==''">$(GITVERSION_MAJORMINORPATCH)</_ApplicationVersion>
			
			<_ApplicatonInformationalVersion>$(ApplicationInformationalVersion)</_ApplicatonInformationalVersion>
			<!-- If the version is not explicitely set, we use GitVersion -->
			<_ApplicatonInformationalVersion Condition="'$(_ApplicatonInformationalVersion)'==''">$(GITVERSION_INFORMATIONALVERSION)</_ApplicatonInformationalVersion>
			<!-- If GitVersion is not available, we use the Version -->
			<_ApplicatonInformationalVersion Condition="'$(_ApplicatonInformationalVersion)'==''">$(_ApplicationVersion)</_ApplicatonInformationalVersion>
			
			<_ApplicationBuildNumber>$(ApplicationBuildNumber)</_ApplicationBuildNumber>
			<_ApplicationBuildNumber Condition="'$(_ApplicationBuildNumber)'==''">1</_ApplicationBuildNumber>
		</PropertyGroup>

		<ItemGroup>
			<_Major Include="$(_ApplicationVersion.Split('.')[0])" />
			<_Minor Include="$(_ApplicationVersion.Split('.')[1])" />
			<_Revision Include="$(_ApplicationVersion.Split('.')[2])" />
		</ItemGroup>

		<Exec Command="git rev-list --count HEAD"
			  ConsoleToMSBuild="true"
			  Condition="'$(ApplicationBuildNumber)'==''">
			<Output TaskParameter="ConsoleOutput"
					PropertyName="_ApplicationBuildNumber" />
		</Exec>

		<!-- Project-specific values -->
		<PropertyGroup>
			<PackageName>Uno Azure DevOps</PackageName>
			<PackageCompanyName>nventive</PackageCompanyName>
			<!-- Increasing the build number since the commit count was reset when the code went public -->
			<_ApplicationBuildNumber Condition="'$(ApplicationBuildNumber)'==''">$([MSBuild]::Add($(_ApplicationBuildNumber), 305))</_ApplicationBuildNumber>
		</PropertyGroup>

		<PropertyGroup>
			<_VersionWithBuildNumber>@(_Major).@(_Minor).$(_ApplicationBuildNumber).@(_Revision)</_VersionWithBuildNumber>
		</PropertyGroup>

		<Message Text="Application version: $(_ApplicationVersion)" />
		<Message Text="Application informational version: $(_ApplicationInformationalVersion)" />
		<Message Text="Application build number: $(_ApplicationBuildNumber)" />
		<Message Text ="Application version with build number: $(_VersionWithBuildNumber)" />

		<!--<AssemblyInfo CodeLanguage="CS"
				  Condition="Exists('$(_AssemblyInfoPath)')"
				  OutputFile="$(_AssemblyInfoPath)"
				  AssemblyProduct="$(PackageName)"
				  AssemblyCompany="$(PackageCompanyName)"
				  AssemblyCopyright="Copyright (c) $(PackageCompanyName) $([System.DateTime]::Now.Year)"
				  AssemblyVersion="$(_ApplicationVersion)"
				  AssemblyFileVersion="$(_ApplicationBuildNumber)"
				  AssemblyInformationalVersion="$(_ApplicationInformationalVersion)" />-->

		<!-- Android -->
		<XmlPoke Condition="Exists('$(_ManifestPath)')"
				 XmlInputPath="$(_ManifestPath)"
				 Query="/manifest/@android:versionName"
				 Value="$(_ApplicationVersion)"
				 Namespaces="$(_AndroidNamespace)" />

		<XmlPoke Condition="Exists('$(_ManifestPath)')"
				 XmlInputPath="$(_ManifestPath)"
				 Query="/manifest/@android:versionCode"
				 Value="$(_ApplicationBuildNumber)"
				 Namespaces="$(_AndroidNamespace)" />

		<!-- iOS -->
		<XmlPoke Condition="Exists('$(_PlistFilePath)')"
				 XmlInputPath="$(_PlistFilePath)"
				 Query="//plist/dict/key[text() = 'CFBundleShortVersionString']/following-sibling::string[1]"
				 Value="$(_ApplicationVersion)" />

		<XmlPoke Condition="Exists('$(_PlistFilePath)')"
				 XmlInputPath="$(_PlistFilePath)"
				 Query="//plist/dict/key[text() = 'CFBundleVersion']/following-sibling::string[1]"
				 Value="$(_ApplicationBuildNumber)" />

		<!-- UWP -->
		<!-- Forcing the inclusion of the build number in UWP as the standard format is Major.Minor.Build.Revision -->
		<!-- Not doing this makes it impossible to update a package unless the version is updated -->
		<XmlPoke Condition="Exists('$(_AppxManifestPath)')"
				 XmlInputPath="$(_AppxManifestPath)"
				 Query="/x:Package/x:Identity/@Version"
				 Value="$(_VersionWithBuildNumber)"
				 Namespaces="$(_WindowsNamespace)" />

		<!-- WASM -->
		<WriteLinesToFile Condition="'$(WasmHead)'=='true' and Exists('$(_WasmVersionFile)')"
						  File="$(_WasmVersionFile)"
						  Lines="$(_VersionWithBuildNumber)"
						  Overwrite="true" />
	</Target>
</Project>
